"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withFileControl;
var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));
var _once2 = _interopRequireDefault(require("lodash/once"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _core = require("@emotion/core");
var _immutable = require("immutable");
var _uuid = require("uuid");
var _commonTags = require("common-tags");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _decapCmsLibUtil = require("decap-cms-lib-util");
var _arrayMove = require("array-move");
var _core2 = require("@dnd-kit/core");
var _sortable = require("@dnd-kit/sortable");
var _utilities = require("@dnd-kit/utilities");
var _modifiers = require("@dnd-kit/modifiers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = (0, _styledBase.default)("div", {
  target: "e1hax4ql0",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", _decapCmsUiDefault.borders.textField, ";border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";overflow:hidden;", _decapCmsUiDefault.effects.checkerboard, ";", _decapCmsUiDefault.shadows.inset, ";cursor:", props => props.sortable ? 'pointer' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SortableImageButtonsWrapper = (0, _styledBase.default)("div", {
  target: "e1hax4ql1",
  label: "SortableImageButtonsWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1qg97th",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px;"
} : {
  name: "1qg97th",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledImage = (0, _styledBase.default)("img", {
  target: "e1hax4ql2",
  label: "StyledImage"
})(process.env.NODE_ENV === "production" ? {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;"
} : {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function Image(props) {
  return (0, _core.jsx)(StyledImage, _extends({
    role: "presentation"
  }, props));
}
function SortableImageButtons({
  onRemove,
  onReplace
}) {
  return (0, _core.jsx)(SortableImageButtonsWrapper, null, (0, _core.jsx)(_decapCmsUiDefault.IconButton, {
    size: "small",
    type: "media",
    onClick: onReplace
  }), (0, _core.jsx)(_decapCmsUiDefault.IconButton, {
    size: "small",
    type: "close",
    onClick: onRemove
  }));
}
function SortableImage(props) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition
  } = (0, _sortable.useSortable)({
    id: props.id
  });
  const style = {
    transform: _utilities.CSS.Transform.toString(transform),
    transition
  };
  const {
    itemValue,
    getAsset,
    field,
    onRemove,
    onReplace
  } = props;
  return (0, _core.jsx)("div", _extends({
    ref: setNodeRef,
    style: style
  }, attributes, listeners), (0, _core.jsx)(ImageWrapper, {
    sortable: true
  }, (0, _core.jsx)(Image, {
    src: getAsset(itemValue, field) || ''
  })), (0, _core.jsx)(SortableImageButtons, {
    item: itemValue,
    onRemove: onRemove,
    onReplace: onReplace
  }));
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "e1mylu-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;;label:SortableMultiImageWrapper;"
} : {
  name: "e1mylu-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;;label:SortableMultiImageWrapper;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function SortableMultiImageWrapper({
  items,
  getAsset,
  field,
  onSortEnd,
  onRemoveOne,
  onReplaceOne
}) {
  const activationConstraint = {
    distance: 4
  };
  const sensors = (0, _core2.useSensors)((0, _core2.useSensor)(_core2.MouseSensor, {
    activationConstraint
  }), (0, _core2.useSensor)(_core2.TouchSensor, {
    activationConstraint
  }));
  function handleSortEnd({
    active,
    over
  }) {
    onSortEnd({
      oldIndex: items.findIndex(item => item.id === active.id),
      newIndex: items.findIndex(item => item.id === over.id)
    });
  }
  return (0, _core.jsx)("div", {
    // eslint-disable-next-line react/no-unknown-property
    css: _ref
  }, (0, _core.jsx)(_core2.DndContext, {
    modifiers: [_modifiers.restrictToParentElement],
    collisionDetection: _core2.closestCenter,
    sensors: sensors,
    onDragEnd: handleSortEnd
  }, (0, _core.jsx)(_sortable.SortableContext, {
    items: items
  }, items.map((item, index) => (0, _core.jsx)(SortableImage, {
    key: item.id,
    id: item.id,
    index: index,
    itemValue: item.value,
    getAsset: getAsset,
    field: field,
    onRemove: onRemoveOne(index),
    onReplace: onReplaceOne(index)
  })))));
}
const FileLink = (0, _styledBase.default)("a", {
  target: "e1hax4ql3",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinks = (0, _styledBase.default)("div", {
  target: "e1hax4ql4",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinkList = (0, _styledBase.default)("ul", {
  target: "e1hax4ql5",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "155za0w",
  styles: "list-style-type:none;"
} : {
  name: "155za0w",
  styles: "list-style-type:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileWidgetButton = (0, _styledBase.default)("button", {
  target: "e1hax4ql6",
  label: "FileWidgetButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.components.badge, ";margin-bottom:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const FileWidgetButtonRemove = (0, _styledBase.default)("button", {
  target: "e1hax4ql7",
  label: "FileWidgetButtonRemove"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.components.badgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function isMultiple(value) {
  return Array.isArray(value) || _immutable.List.isList(value);
}
function sizeOfValue(value) {
  if (Array.isArray(value)) {
    return value.length;
  }
  if (_immutable.List.isList(value)) {
    return value.size;
  }
  return value ? 1 : 0;
}
function valueListToArray(value) {
  return _immutable.List.isList(value) ? value.toArray() : value !== null && value !== void 0 ? value : '';
}
function valueListToSortableArray(value) {
  if (!isMultiple(value)) {
    return value;
  }
  const valueArray = valueListToArray(value).map(value => ({
    id: (0, _uuid.v4)(),
    value
  }));
  return valueArray;
}
const warnDeprecatedOptions = (0, _once2.default)(field => console.warn((0, _commonTags.oneLine)`
  Decap CMS config: ${field.get('name')} field: property "options" has been deprecated for the
  ${field.get('widget')} widget and will be removed in the next major release. Rather than
  \`field.options.media_library\`, apply media library options for this widget under
  \`field.media_library\`.
`));
function withFileControl({
  forImage
} = {}) {
  var _class;
  return _class = class FileControl extends _react.default.Component {
    constructor(props) {
      super(props);
      _defineProperty(this, "handleChange", e => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        e.preventDefault();
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value: valueListToArray(value),
          allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
          config: mediaLibraryFieldOptions.get('config'),
          field
        });
      });
      _defineProperty(this, "handleUrl", subject => e => {
        e.preventDefault();
        const url = window.prompt(this.props.t(`editor.editorWidgets.${subject}.promptUrl`));
        return this.props.onChange(url);
      });
      _defineProperty(this, "handleRemove", e => {
        e.preventDefault();
        this.props.onClearMediaControl(this.controlID);
        return this.props.onChange('');
      });
      _defineProperty(this, "onRemoveOne", index => () => {
        const value = valueListToArray(this.props.value);
        value.splice(index, 1);
        return this.props.onChange(sizeOfValue(value) > 0 ? [...value] : null);
      });
      _defineProperty(this, "onReplaceOne", index => () => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value: valueListToArray(value),
          replaceIndex: index,
          allowMultiple: false,
          config: mediaLibraryFieldOptions.get('config'),
          field
        });
      });
      _defineProperty(this, "getMediaLibraryFieldOptions", () => {
        const {
          field
        } = this.props;
        if (field.hasIn(['options', 'media_library'])) {
          warnDeprecatedOptions(field);
          return field.getIn(['options', 'media_library'], (0, _immutable.Map)());
        }
        return field.get('media_library', (0, _immutable.Map)());
      });
      _defineProperty(this, "allowsMultiple", () => {
        const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
        return mediaLibraryFieldOptions.get('config', false) && mediaLibraryFieldOptions.get('config').get('multiple', false);
      });
      _defineProperty(this, "onSortEnd", ({
        oldIndex,
        newIndex
      }) => {
        const {
          value
        } = this.props;
        const newValue = (0, _arrayMove.arrayMoveImmutable)(value, oldIndex, newIndex);
        return this.props.onChange(newValue);
      });
      _defineProperty(this, "getValidateValue", () => {
        const {
          value
        } = this.props;
        if (value) {
          return isMultiple(value) ? value.map(v => (0, _decapCmsLibUtil.basename)(v)) : (0, _decapCmsLibUtil.basename)(value);
        }
        return value;
      });
      _defineProperty(this, "renderFileLink", value => {
        const size = MAX_DISPLAY_LENGTH;
        if (!value || value.length <= size) {
          return value;
        }
        const text = `${value.slice(0, size / 2)}\u2026${value.slice(-(size / 2) + 1)}`;
        return (0, _core.jsx)(FileLink, {
          href: value,
          rel: "noopener",
          target: "_blank"
        }, text);
      });
      _defineProperty(this, "renderFileLinks", () => {
        const {
          value
        } = this.props;
        if (isMultiple(value)) {
          return (0, _core.jsx)(FileLinks, null, (0, _core.jsx)(FileLinkList, null, value.map(val => (0, _core.jsx)("li", {
            key: val
          }, this.renderFileLink(val)))));
        }
        return (0, _core.jsx)(FileLinks, null, this.renderFileLink(value));
      });
      _defineProperty(this, "renderImages", () => {
        const {
          getAsset,
          value,
          field
        } = this.props;
        const items = valueListToSortableArray(value);
        if (isMultiple(value)) {
          return (0, _core.jsx)(SortableMultiImageWrapper, {
            items: items,
            onSortEnd: this.onSortEnd,
            onRemoveOne: this.onRemoveOne,
            onReplaceOne: this.onReplaceOne,
            distance: 4,
            getAsset: getAsset,
            field: field,
            axis: "xy",
            lockToContainerEdges: true
          });
        }
        const src = getAsset(value, field);
        return (0, _core.jsx)(ImageWrapper, null, (0, _core.jsx)(Image, {
          src: src || ''
        }));
      });
      _defineProperty(this, "renderSelection", subject => {
        const {
          t,
          field
        } = this.props;
        const allowsMultiple = this.allowsMultiple();
        return (0, _core.jsx)("div", null, forImage ? this.renderImages() : null, (0, _core.jsx)("div", null, forImage ? null : this.renderFileLinks(), (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.${this.allowsMultiple() ? 'addMore' : 'chooseDifferent'}`)), field.get('choose_url', true) && !this.allowsMultiple() ? (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.replaceUrl`)) : null, (0, _core.jsx)(FileWidgetButtonRemove, {
          onClick: this.handleRemove
        }, t(`editor.editorWidgets.${subject}.remove${allowsMultiple ? 'All' : ''}`))));
      });
      _defineProperty(this, "renderNoSelection", subject => {
        const {
          t,
          field
        } = this.props;
        return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.choose${this.allowsMultiple() ? 'Multiple' : ''}`)), field.get('choose_url', true) ? (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.chooseUrl`)) : null);
      });
      this.controlID = (0, _uuid.v4)();
    }
    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value or getAsset changes.
       */
      if (this.props.value !== nextProps.value || this.props.getAsset !== nextProps.getAsset) {
        return true;
      }

      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */
      const mediaPath = nextProps.mediaPaths.get(this.controlID);
      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }
      return false;
    }
    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);
      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }
    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }
    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      return (0, _core.jsx)("div", {
        className: classNameWrapper
      }, (0, _core.jsx)("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject)));
    }
  }, _defineProperty(_class, "propTypes", {
    field: _propTypes.default.object.isRequired,
    getAsset: _propTypes.default.func.isRequired,
    mediaPaths: _reactImmutableProptypes.default.map.isRequired,
    onAddAsset: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onRemoveInsertedMedia: _propTypes.default.func.isRequired,
    onOpenMediaLibrary: _propTypes.default.func.isRequired,
    onClearMediaControl: _propTypes.default.func.isRequired,
    onRemoveMediaControl: _propTypes.default.func.isRequired,
    classNameWrapper: _propTypes.default.string.isRequired,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _reactImmutableProptypes.default.listOf(_propTypes.default.string)]),
    t: _propTypes.default.func.isRequired
  }), _defineProperty(_class, "defaultProps", {
    value: ''
  }), _class;
}